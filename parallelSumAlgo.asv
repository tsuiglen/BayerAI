format long
n = 1000000000;
%parallel processor 1 computes quarterSum for first term to quarter way
parallel_processor_1 = quarterSum(1,floor(n/4));
%parallel processor 2 computes quarterSum for the first term at quarter
%way to halfway.
parallel_processor_2 = quarterSum(floor(n/4)+1,floor(n/2));
%parallel processor 3 computes quarterSum for first term at halfway to
%three-quarter way
parallel_processor_3 = quarterSum(floor(n/2)+1,floor(3*n/4));
%parallel processor 4 computes quarterSum for first term at
%three-quarter way to the final n term.
parallel_processor_4 = quarterSum(floor(3*n/4)+1,floor(n));
%all values are converted to type single and totalled to give the
%overall sum of the series
total = ((parallel_processor_1) + (parallel_processor_2) + (parallel_processor_3) + (parallel_processor_4));

fprintf('Total computed sum after 1000000000 terms: %.15f\n', (total));
fprintf('Matlab reference (ground truth): %.15f\n', (log(2)));
fprintf('Calculated True Error: %.15f\n', single(abs(log(2)-total)));
function sum = quarterSum(start,finish)
    %initialize
    sum = 0.0;
    %for the ranges of the quarter section submitted
    for i = start:finish
        %determine whether this term should be added or subtracted
        sign = (-1.0)^(i-1);
        %add the term with the sign to the running total
        sum = (sum + sign * (1/i));
    end
end